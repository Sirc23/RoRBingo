<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.master_controller = self;

draw_set_font(font0);

n = 5;
this_n = 5;
border_width = 20;
text_alpha = 1;

randomize();
this_seed = irandom(9999999);
next_seed = 0; //Will be set in generate_card()

showEvent = 0;
event_message = "";

closest_bingos = array_create(0);
closest_index = -1;

timer = 0;

create_image_structs();

surfaces = ds_map_create();

//Shader stuff
u_position_yiq = shader_get_uniform(shader_hue_yiq, "u_Position"); // control shader
u_position_hsv = shader_get_uniform(shader_hue_hsv, "u_Position"); // control shader

generate_card(this_seed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer += 1;
showEvent = max(0, showEvent - 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(window_has_focus())
{
    var this_surface = get_surface_at_pos(mouse_x, mouse_y);
    
    if(this_surface != noone)
    {
        this_surface.captured = !this_surface.captured;
        this_surface.captureTimer = this_surface.captureTimerSet;
    }
    
}
closest_bingos = noone;
closest_bingos = find_closest_bingos();
closest_index = lerp(-1,array_height_2d(closest_bingos), array_height_2d(closest_bingos) &gt; 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text_alpha = max(text_alpha - 0.025, 0);
draw_set_alpha(text_alpha);
draw_rectangle_color(0,0,lerp(22,32,n&gt;9),25 ,c_black,c_black,c_black,c_black,false);
draw_text_transformed(6,0,string(n),1,1,0);
draw_set_alpha(1);

//Draw seed info
var wwidth = window_get_width();
var wheight = window_get_height() - 20;

hBorder = wwidth - (2 * view_xview[0]);
vBorder = wheight - (2 * view_yview[0]);

var wport = view_wport[0];
var hport = view_hport[0];
var tScaleX = wport / hport;
var tScaleY = wport / hport;

var seedX = 0;
var seedY = hport - 22;

var nextX = wport / 2;
var nextY = hport - 22;

if(showEvent == 0)
{
    draw_text_transformed(seedX,seedY,"Seed: " + string(this_seed),1,1,0);
    draw_text_transformed(nextX,nextY,"Next: " + string(next_seed),1,1,0);
}
else
{
    draw_text_transformed(seedX,seedY,string(event_message),1,1,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Calculate dimensions
view_hport[0] = view_wport[0] + 20;

var wwidth = window_get_width();
var wheight = window_get_height() - (20 * view_hport[0] / view_wport[0]);
//var wheight = window_get_height();

var win_xscale = room_width / wwidth;
var win_yscale = room_height / wheight;

build_surface("a");
build_surface("b");

surface_set_target(get_surface("a"));

//Draw card
for(var a = 0; a &lt; ds_list_size(instances); a++)
{
    var this_instance = instances[|a];
    var this_color = c_black;
    draw_rectangle_color(this_instance.x, this_instance.y, this_instance.x + this_instance.width, this_instance.y + this_instance.height, this_color, this_color, this_color, this_color, false);
    if(this_instance.mySprite != noone)
    {
        var scaleX = this_instance.width / sprite_get_width(this_instance.mySprite);
        var scaleY = this_instance.height / sprite_get_height(this_instance.mySprite);
        var this_color = lerp(c_white, $999999, this_instance.captured);
        draw_sprite_ext(this_instance.mySprite, 0, this_instance.x + this_instance.captureX, this_instance.y, scaleX * this_instance.captureWidth, scaleY, 0, this_color, 1);
        
        //Draw sheen if captured
        if(this_instance.captured)
        {
            var sprit = sheenSpr;
            var scaleX = this_instance.width / sprite_get_width(sprit);
            var scaleY = this_instance.height / sprite_get_height(sprit);
            
            var frames = 15;
            
            var sheenTimer = timer % (frames*this_n*2);
            var timeOffset = ((a div this_n) + (a % this_n)) * (frames * (1/2.5));
            var this_sheenTimer = lerp(0, sheenTimer - timeOffset, sheenTimer &gt; timeOffset &amp;&amp; sheenTimer &lt;= timeOffset + frames);
            var sheenX = lerp(-this_instance.width/2,this_instance.width, this_sheenTimer / frames);
            var sheenY = lerp(-this_instance.height/2,this_instance.height, this_sheenTimer / frames);
            
            
            if(this_sheenTimer != 0)
            {
                //draw_sprite_ext(sheenSpr, 0, this_instance.x + sheenX, this_instance.y + sheenY, scaleX, scaleY, 0, c_white, 1);
                
                var st_left = max(0, -sheenX / scaleX);
                var st_top = max(0, -sheenY / scaleY);
                var st_width = sprite_get_width(sprit) - min(0,st_left);
                var st_height = sprite_get_height(sprit) - min(0,st_top);
                draw_sprite_part_ext(sprit, 0, st_left, st_top, st_width, st_height, this_instance.x + sheenX + st_left * scaleX, this_instance.y + sheenY + st_top * scaleY, scaleX, scaleY, $dddddd, 0.7);
            }
        }
    }
}

//Draw rainbow borders
shader_set(shader_hue_hsv);
shader_set_uniform_f(u_position_hsv, (timer % 100) / 100);
for(var a = 0; a &lt; ds_list_size(instances); a++)
{
    var this_instance = instances[|a];
    if(this_instance.captured &amp;&amp; this_instance.mySprite != noone)
    {
        var scaleX = this_instance.width / sprite_get_width(rainbowSpr);
        var scaleY = this_instance.height / sprite_get_height(rainbowSpr);
        draw_sprite_ext(rainbowSpr, 0, this_instance.x + this_instance.captureX, this_instance.y, scaleX * this_instance.captureWidth, scaleY, 0, $666666, 0.1);
    
        var scaleX = this_instance.width / sprite_get_width(borderSpr);
        var scaleY = this_instance.height / sprite_get_height(borderSpr);
        draw_sprite_ext(borderSpr, 2, this_instance.x + this_instance.captureX, this_instance.y, scaleX * this_instance.captureWidth, scaleY, 0, c_white, 1);
        
        
    }
}
shader_reset();

//Draw regular borders
for(var a = 0; a &lt; ds_list_size(instances); a++)
{
    var this_instance = instances[|a];
    if(!this_instance.captured &amp;&amp; this_instance.mySprite != noone)
    {
        var scaleX = this_instance.width / sprite_get_width(borderSpr);
        var scaleY = this_instance.height / sprite_get_height(borderSpr);
        draw_sprite_ext(borderSpr, 0, this_instance.x + this_instance.captureX, this_instance.y, scaleX * this_instance.captureWidth, scaleY, 0, this_instance.myColor, 1);
    }
}
surface_reset_target();

//Divide blend mode
surface_set_target(get_surface("b"));
//Set shader variables
var shader_surface_index = shader_get_sampler_index(shader_divide, "gradient");
var shader_texture = surface_get_texture(get_surface("a"));
var shader_screen_size = shader_get_uniform(shader_divide, "screenSize");

//Draw BG square for captured cards
draw_rectangle_color(0,0,room_width,room_height,c_black,c_black,c_black,c_black,false);
for(var a = 0; a &lt; ds_list_size(instances); a++)
{
    var this_instance = instances[|a];
    if(this_instance.captured &amp;&amp; this_instance.mySprite != noone)
    {
        
        var this_x = this_instance.x - (border_width/2);
        var this_y = this_instance.y - (border_width/2);
        
        var scaleX = this_instance.width / sprite_get_width(shaderSpr);
        var scaleY = this_instance.height / sprite_get_height(shaderSpr);
        
        var this_width = sprite_get_width(this_instance.mySprite) * scaleX + (border_width);
        var this_height = sprite_get_height(this_instance.mySprite) * scaleY + (border_width);
        
        var this_color = c_black;
        draw_rectangle_color(this_x, this_y, this_x + this_width, this_y + this_height, this_color, this_color, this_color, this_color, false);
    }
}

shader_set(shader_divide);

texture_set_stage(shader_surface_index, shader_texture);
shader_set_uniform_f(shader_screen_size, room_width, room_height);

//Draw the texture on top of the other surface
for(var a = 0; a &lt; ds_list_size(instances); a++)
{
    var this_instance = instances[|a];
    if(this_instance.mySprite != noone)
    {
        var scaleX = this_instance.width / sprite_get_width(shaderSpr);
        var scaleY = this_instance.height / sprite_get_height(shaderSpr);
        draw_sprite_ext(shaderSpr, 1, this_instance.x, this_instance.y, scaleX, scaleY, 0, c_white, 1);
        
    }
    
    //Draw "nearest bingo" shine if in list
    if(closest_index &gt; -1)
    {
        var sprit = shaderSpr;
        var scaleX = this_instance.width / sprite_get_width(sprit);
        var scaleY = this_instance.height / sprite_get_height(sprit);
        
        var frames = 15;
        
        var in_this_list = -1;
        //Only show shine if in this bingo's list
        for(var c = 0; c &lt; array_length_2d(closest_bingos, closest_index); c++)
        {
            if(closest_bingos[closest_index, c] == a)
            {
                in_this_list = c;
                break;
            }
        }
        
        var sheenTimer = (timer - frames*this_n) % (frames*this_n*2);
        var timeOffset = (in_this_list) * (frames * (1/2.5));
        var this_sheenTimer = lerp(0, sheenTimer - timeOffset, sheenTimer &gt; timeOffset &amp;&amp; sheenTimer &lt;= timeOffset + frames);
        
        //Update which bingo to show with every cycle
        if(a == 0 &amp;&amp; sheenTimer == 0)
        {
            closest_index = (closest_index + 1) % array_height_2d(closest_bingos);
        }
        
        
        if(this_sheenTimer != 0 &amp;&amp; in_this_list &gt; -1)
        {
            //draw_sprite_ext(sheenSpr, 0, this_instance.x + sheenX, this_instance.y + sheenY, scaleX, scaleY, 0, c_white, 1);
            //if(a == 0)            show_debug_message(((frames/2)-abs(this_sheenTimer-timeOffset-(frames/2)))/(frames/2));
            draw_sprite_ext(sprit, 0, this_instance.x + this_instance.captureX, this_instance.y, scaleX * this_instance.captureWidth, scaleY, 0, c_white, ((frames/2)-abs(this_sheenTimer-(frames/2)))/(frames/2));
        }
    }
    
}
        

shader_reset();

surface_reset_target();

draw_surface_ext(get_surface("b"), 0, 0, wwidth / window_get_width(), wheight / window_get_height(), 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="86">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(clipboard_has_text())
{
    var this_string = clipboard_get_text();
    this_string = string_copy(this_string, 0, string_pos(";", this_string)-1);
    var findN = string_copy(this_string,0,2);
    var findNum = string_copy(this_string,3,2);
    
    if(findN == "n=")
    {
        n = clamp(real(findNum),3,10);
        next_seed = string_copy(clipboard_get_text(), string_length(this_string)+2, 999);
        //next_seed = this_string;
        event_message = "Next seed set to '" + string(next_seed) + "'! (size=" + string(n) + ")";
        showEvent = 120;
        
        
    }
    else
    {
        next_seed = clipboard_get_text();
        event_message = "Next seed set to '" + string(next_seed) + "'!";
        showEvent = 120;
        
        
    }
}
else
{
    event_message = "Clipboard contents not compatible.";
    showEvent = 120;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var this_x = get_integer("Enter new width of window in pixels", window_get_width());
var this_y = get_integer("Enter new height of window in pixels", window_get_height());

window_set_size(this_x, this_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//n = min(n+1,floor(sqrt(ds_list_size(masterImages)))-2);
n = min(n+1,10);
text_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>n = max(3,n-1);
text_alpha = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_message = "Copied current seed to clipboard!";
showEvent = 120;

clipboard_set_text("n=" + string(sqrt(ds_list_size(instances))) + ";" + string(this_seed));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>generate_card(next_seed);
this_n = sqrt(ds_list_size(instances));

closest_bingos = noone;
closest_index = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
